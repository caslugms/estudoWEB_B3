üîπ 1Ô∏è‚É£ Backend (server.js)
import express from "express";
import fs from "fs";
import path from "path";
import jwt from "jsonwebtoken";
import bodyParser from "body-parser";

const app = express();
const PORT = 3000;
const SECRET = "chave_super_secreta";

app.use(bodyParser.json());

// Caminho para arquivos
const __dirname = path.resolve();
const usuariosPath = path.join(__dirname, "Dados", "usuarios.json");
const itensPath = path.join(__dirname, "Dados", "itens.json");

// ----------------------
// FUN√á√ÉO AJUDA JSON
// ----------------------
function lerJSON(caminho) {
  if (!fs.existsSync(caminho)) return [];
  const data = fs.readFileSync(caminho);
  return JSON.parse(data);
}

function salvarJSON(caminho, dados) {
  fs.writeFileSync(caminho, JSON.stringify(dados, null, 2));
}

// ----------------------
// ROTAS DE USU√ÅRIO
// ----------------------

// Cadastro
app.post("/usuarios", (req, res) => {
  const { username, password } = req.body;
  if (!username || !password)
    return res.status(400).json({ message: "Dados incompletos" });

  const usuarios = lerJSON(usuariosPath);
  if (usuarios.find(u => u.username === username))
    return res.status(400).json({ message: "Usu√°rio j√° existe" });

  usuarios.push({ username, password });
  salvarJSON(usuariosPath, usuarios);

  res.json({ message: "Usu√°rio criado com sucesso" });
});

// Login
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const usuarios = lerJSON(usuariosPath);
  const user = usuarios.find(u => u.username === username && u.password === password);

  if (!user) return res.status(401).json({ message: "Usu√°rio ou senha inv√°lidos" });

  const token = jwt.sign({ username }, SECRET, { expiresIn: "1h" });
  res.json({ token });
});

// ----------------------
// MIDDLEWARE JWT
// ----------------------
function autenticar(req, res, next) {
  const token = req.headers["authorization"];
  if (!token) return res.status(401).json({ message: "Sem token" });

  jwt.verify(token, SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ message: "Token inv√°lido" });
    req.user = decoded.username;
    next();
  });
}

// ----------------------
// ROTAS ITENS (CRUD)
// ----------------------

// Listar itens
app.get("/itens", autenticar, (req, res) => {
  const itens = lerJSON(itensPath);
  res.json(itens);
});

// Criar item
app.post("/itens", autenticar, (req, res) => {
  const { nome, preco } = req.body;
  const itens = lerJSON(itensPath);
  const id = Date.now();
  const item = { id, nome, preco };
  itens.push(item);
  salvarJSON(itensPath, itens);
  res.json({ message: "Item criado", item });
});

// Atualizar item
app.put("/itens/:id", autenticar, (req, res) => {
  const { id } = req.params;
  const { preco } = req.body;
  const itens = lerJSON(itensPath);
  const item = itens.find(i => i.id == id);
  if (!item) return res.status(404).json({ message: "Item n√£o encontrado" });

  item.preco = preco;
  salvarJSON(itensPath, itens);
  res.json({ message: "Item atualizado" });
});

// Deletar item
app.delete("/itens/:id", autenticar, (req, res) => {
  const { id } = req.params;
  let itens = lerJSON(itensPath);
  itens = itens.filter(i => i.id != id);
  salvarJSON(itensPath, itens);
  res.json({ message: "Item deletado" });
});

// ----------------------
// SERVIR FRONTEND
// ----------------------
app.use(express.static(path.join(__dirname, "Public")));

app.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));

üîπ 2Ô∏è‚É£ Frontend (public/index.html)
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Teste API CRUD + JWT</title>
  <style>
    body { font-family: Arial; padding: 20px; }
    input, button { margin: 5px; }
    ul { list-style: none; padding: 0; }
  </style>
</head>
<body>
  <h1>API Teste CRUD + JWT</h1>

  <!-- Cadastro/Login -->
  <div id="loginDiv">
    <h2>Cadastro</h2>
    <input type="text" id="newUser" placeholder="Novo usu√°rio" />
    <input type="password" id="newPass" placeholder="Senha" />
    <button onclick="cadastrar()">Cadastrar</button>

    <h2>Login</h2>
    <input type="text" id="username" placeholder="Usu√°rio" />
    <input type="password" id="password" placeholder="Senha" />
    <button onclick="login()">Login</button>

    <p id="msgLogin"></p>
  </div>

  <!-- CRUD -->
  <div id="crudDiv" style="display:none;">
    <h2>Itens</h2>
    <ul id="itemList"></ul>

    <h3>Criar item</h3>
    <input type="text" id="nome" placeholder="Nome" />
    <input type="number" id="preco" placeholder="Pre√ßo" step="0.01" />
    <button onclick="criarItem()">Criar</button>

    <h3>Atualizar item</h3>
    <input type="number" id="idUpdate" placeholder="ID do item" />
    <input type="number" id="novoPreco" placeholder="Novo pre√ßo" step="0.01" />
    <button onclick="atualizarItem()">Atualizar</button>

    <h3>Deletar item</h3>
    <input type="number" id="idDelete" placeholder="ID do item" />
    <button onclick="deletarItem()">Deletar</button>
  </div>

  <script>
    let token = "";

    async function cadastrar() {
      const username = document.getElementById("newUser").value;
      const password = document.getElementById("newPass").value;
      const res = await fetch("http://localhost:3000/usuarios", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });
      const data = await res.json();
      alert(data.message);
    }

    async function login() {
      const username = document.getElementById("username").value;
      const password = document.getElementById("password").value;
      const res = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });
      const data = await res.json();
      if (res.ok) {
        token = data.token;
        document.getElementById("loginDiv").style.display = "none";
        document.getElementById("crudDiv").style.display = "block";
        listarItens();
      } else {
        document.getElementById("msgLogin").innerText = data.message;
      }
    }

    async function listarItens() {
      const res = await fetch("http://localhost:3000/itens", {
        headers: { "Authorization": token }
      });
      const itens = await res.json();
      const ul = document.getElementById("itemList");
      ul.innerHTML = "";
      itens.forEach(i => {
        const li = document.createElement("li");
        li.textContent = `ID: ${i.id} | Nome: ${i.nome} | Pre√ßo: ${i.preco}`;
        ul.appendChild(li);
      });
    }

    async function criarItem() {
      const nome = document.getElementById("nome").value;
      const preco = parseFloat(document.getElementById("preco").value);
      await fetch("http://localhost:3000/itens", {
        method: "POST",
        headers: { "Content-Type": "application/json", "Authorization": token },
        body: JSON.stringify({ nome, preco })
      });
      listarItens();
    }

    async function atualizarItem() {
      const id = document.getElementById("idUpdate").value;
      const preco = parseFloat(document.getElementById("novoPreco").value);
      await fetch(`http://localhost:3000/itens/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json", "Authorization": token },
        body: JSON.stringify({ preco })
      });
      listarItens();
    }

    async function deletarItem() {
      const id = document.getElementById("idDelete").value;
      await fetch(`http://localhost:3000/itens/${id}`, {
        method: "DELETE",
        headers: { "Authorization": token }
      });
      listarItens();
    }
  </script>
</body>
</html>